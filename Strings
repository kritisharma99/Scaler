Q1. tolower()
Solved
feature icon
Using hints is now penalty free
Use Hint
Problem Description
You are given a function to_lower() which takes a character array A as an argument.

Convert each character of A into lowercase characters if it exists. If the lowercase of a character does not exist, it remains unmodified.
The uppercase letters from A to Z are converted to lowercase letters from a to z respectively.

Return the lowercase version of the given character array.



Problem Constraints
1 <= |A| <= 105



Input Format
The only argument is a character array A.



Output Format
Return the lowercase version of the given character array.



Example Input
Input 1:

 A = ['S', 'c', 'A', 'l', 'e', 'r', 'A', 'c', 'a', 'D', 'e', 'm', 'y']
Input 2:

 A = ['S', 'c', 'a', 'L', 'e', 'r', '#', '2', '0', '2', '0']


Example Output
Output 1:

 ['s', 'c', 'a', 'l', 'e', 'r', 'a', 'c', 'a', 'd', 'e', 'm', 'y']
Output 2:

 ['s', 'c', 'a', 'l', 'e', 'r', '#', '2', '0', '2', '0']


Example Explanation
Explanation 1:

 All the characters in the returned array are in lowercase alphabets.
Explanation 2:
 Since there is no lowercase version for '#', '2'and '0'.  It remains unchanged.
 The rest of the Uppercase alphabet is converted to lowercase accordingly.
 
-------------------------------------------------------------------------------------------------------------------
Solution:
 public class Solution {
    public ArrayList<Character> to_lower(ArrayList<Character> A) {
        for(int i=0;i<A.size();i++){
            if((A.get(i)>='A' && A.get(i)<='Z')){
                char s = (char)(A.get(i)+32);
                // char s = (char)('a' + (A.get(i)-'A'));
                A.set(i,s);
            }
        } 
        return A;  
    }
}

####################################################################################################################################
Q2. toupper()
Solved
feature icon
Using hints is now penalty free
Use Hint
Problem Description
You are given a function to_upper() consisting of a character array A.

Convert each character of A into Uppercase character if it exists. If the Uppercase of a character does not exist, it remains unmodified.
The lowercase letters from a to z is converted to uppercase letters from A to Z respectively.

Return the uppercase version of the given character array.



Problem Constraints
1 <= |A| <= 105



Input Format
Only argument is a character array A.



Output Format
Return the uppercase version of the given character array.



Example Input
Input 1:

 A = ['S', 'c', 'A', 'L', 'E', 'r', 'A', 'c', 'a', 'D', 'e', 'm', 'y']
Input 2:

 A = ['S', 'c', 'a', 'L', 'e', 'R', '#', '2', '0', '2', '0']


Example Output
Output 1:

 ['S', 'C', 'A', 'L', 'E', 'R', 'A', 'C', 'A', 'D', 'E', 'M', 'Y']
Output 2:

 ['S', 'C', 'A', 'L', 'E', 'R', '#', '2', '0', '2', '0']


Example Explanation
Explanation 1:
 All the characters in the returned array are in uppercase alphabets.
Explanation 2:
 Since there is no Uppercase version for '#', '2'and '0'.  It remains unchanged.
 Rest of the Lowercase alphabets are converted to Uppercase accordingly.

--------------------------------------------------------------------------------------------------------------------
Solutn:
public class Solution {
    public ArrayList<Character> to_upper(ArrayList<Character> A) {
        for(int i=0;i<A.size();i++){
            if(A.get(i)>='a' && A.get(i)<='z'){
                char s = (char)('A' + (A.get(i)-'a'));
                A.set(i,s);
            }
        }
        return A;
    }
}
###################################################################################################################

Q3. Toggle Case
Solved
feature icon
Using hints is now penalty free
Use Hint
Problem Description
You are given a character string A having length N, consisting of only lowercase and uppercase latin letters.

You have to toggle case of each character of string A. For e.g 'A' is changed to 'a', 'e' is changed to 'E', etc.



Problem Constraints
1 <= N <= 105

A[i] âˆˆ ['a'-'z', 'A'-'Z']



Input Format
First and only argument is a character string A.



Output Format
Return a character string.



Example Input
Input 1:

 A = "Hello" 
Input 2:

 A = "tHiSiSaStRiNg" 


Example Output
Output 1:

 hELLO 
Output 2:

 ThIsIsAsTrInG 


Example Explanation
Explanation 1:

 'H' changes to 'h'
 'e' changes to 'E'
 'l' changes to 'L'
 'l' changes to 'L'
 'o' changes to 'O'
Explanation 2:

 "tHiSiSaStRiNg" changes to "ThIsIsAsTrInG".
-------------------------------------------------------------------------------------------------------------------
Solution:

public class Solution {
    public String solve(String A) {
        char ch[] = A.toCharArray();
        for(int i=0;i<ch.length;i++){
            if(ch[i]>='A'&& ch[i]<='Z'){
                char s = (char)('a'+(ch[i]-'A'));
                // char s =(char)(A[i]+32);
                ch[i] = s;
            }
            else if(ch[i]>='a'&& ch[i]<='z'){
                char s = (char)('A'+(ch[i]-'a'));
                // char s =(char)(A[i]-32);
                ch[i] = s;

            }
        }
        String str = new String(ch);
        return str;
    }
}
#######################################################################################################
Q4. Count Sort
Unsolved
feature icon
Using hints is now penalty free
Use Hint
Problem Description
Given an array A. Sort this array using Count Sort Algorithm and return the sorted array.


Problem Constraints
1 <= |A| <= 105
1 <= A[i] <= 105


Input Format
The first argument is an integer array A.


Output Format
Return an integer array that is the sorted array A.


Example Input
Input 1:
A = [1, 3, 1]
Input 2:
A = [4, 2, 1, 3]


Example Output
Output 1:
[1, 1, 3]
Output 2:
[1, 2, 3, 4]


Example Explanation
For Input 1:
The array in sorted order is [1, 1, 3].
For Input 2:
The array in sorted order is [1, 2, 3, 4].

---------------------------------------------------------------------------------------------

Solution:
=============================================================================================
Q5. Simple Reverse
Solved
feature icon
Using hints is now penalty free
Use Hint
Problem Description
Given a string A, you are asked to reverse the string and return the reversed string.



Problem Constraints
1 <= |A| <= 105

String A consist only of lowercase characters.



Input Format
First and only argument is a string A.



Output Format
Return a string denoting the reversed string.



Example Input
Input 1:

 A = "scaler"
Input 2:

 A = "academy"


Example Output
Output 1:

 "relacs"
Output 2:

 "ymedaca"


Example Explanation
Explanation 1:

 Reverse the given string.
------------------------------------------------------------------------
Solution:
public class Solution {
    public String solve(String A) {
        //this will give TLE
        // String str ="";
        // char ch;

        // for(int i=0;i<A.length();i++){
        //     ch = A.charAt(i);
        //     str = ch + str;
        // }

        // return str;

        //we use swap method - traverse half of the length then swap i with n-i-1;
       char ch[] = A.toCharArray();
       int n = ch.length;
       for(int i=0;i<(ch.length)/2;i++){
           char temp;
           temp = ch[n-i-1];
           ch[n-i-1] = ch[i];
           ch[i] = temp;
        }
        String str = new String(ch);
        return str; 
        
    }
}

==================================================================================================
Q6. Reverse the String
Unsolved
feature icon
Using hints is now penalty free
Use Hint
Problem Description
You are given a string A of size N.

Return the string A after reversing the string word by word.

NOTE:

A sequence of non-space characters constitutes a word.
Your reversed string should not contain leading or trailing spaces, even if it is present in the input string.
If there are multiple spaces between words, reduce them to a single space in the reversed string.


Problem Constraints
1 <= N <= 3 * 105



Input Format
The only argument given is string A.



Output Format
Return the string A after reversing the string word by word.



Example Input
Input 1:
A = "the sky is blue"
Input 2:
A = "this is ib"


Example Output
Output 1:
"blue is sky the"
Output 2:
"ib is this"    


Example Explanation
Explanation 1:
We reverse the string word by word so the string becomes "blue is sky the".
Explanation 2:
We reverse the string word by word so the string becomes "ib is this".
-----------------------------------------------------------------------------------------------------
Solution:
####################################################################################################
Q7. Longest Palindromic Substring
Unsolved
feature icon
Using hints is now penalty free
Use Hint
Problem Description
Given a string A of size N, find and return the longest palindromic substring in A.

Substring of string A is A[i...j] where 0 <= i <= j < len(A)

Palindrome string:
A string which reads the same backwards. More formally, A is palindrome if reverse(A) = A.

In case of conflict, return the substring which occurs first ( with the least starting index).



Problem Constraints
1 <= N <= 6000



Input Format
First and only argument is a string A.



Output Format
Return a string denoting the longest palindromic substring of string A.

--------------------------------------------------------------------------------------------------------
Solution:
######################################################################################################
